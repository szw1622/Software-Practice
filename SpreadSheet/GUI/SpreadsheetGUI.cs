
using SpreadsheetGrid_Core;
using SpreadsheetUtilities;
/// <summary> 
/// Author:    Jiawen Wang
/// Partner:   Zhuowen Song
/// Date:      03/04/2022
/// Course:    CS 3500, University of Utah, School of Computing 
/// Copyright: CS 3500, Jiawen Wang and Songwen Zhuo- This work may not be copied for use in Academic Coursework. 
/// 
/// We, Jiawen Wang and Songwen Zhuo, certify that we wrote this code from scratch and did not copy it in part or whole from  
/// another source.  All references used in the completion of the assignment are cited in my README file. 
/// 
/// File Contents 
/// This file create GUI for spreadsheet.
/// </summary>

using SS;
using System;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace GUI
{
    /// <summary>
    /// This class creates Spreadsheet GUI. It can show selected cell's name, contents and value.
    /// </summary>
    public partial class SpreadsheetGUI : Form
    {
        //to use methods already built in Spreadsheet
        private Spreadsheet sheet;

        //keep track of selected column
        private int col;

        //keep track of selected column
        private int row;

        //
        string copy_name;

        /// <summary>
        /// Constructor of SpreadsheetGUI. Initialize GUI, set default cell as A1.
        /// </summary>
        public SpreadsheetGUI()
        {
            sheet = new Spreadsheet(isValidName, s => s.ToUpper(), "six");
            this.spreadsheetGridWidget1 = new SpreadsheetGridWidget();

            // Call the AutoGenerated code
            InitializeComponent();

            // Add event handler and select a start cell
            spreadsheetGridWidget1.SelectionChanged += DisplaySelection;

            //set A1 as default cell
            spreadsheetGridWidget1.SetSelection(0, 0, false);
            CellNameBox.Text = "A1";
        }

        /// <summary>
        /// Helper method to check whether the cell name is of the valid form:
        /// one "a-z" followed by one[0-9] and the other[0-9], alphabet here is case insensitive
        /// Returns true if cell name is valid, false otherwise.
        /// </summary>
        /// <param name="name">cell name</param>
        /// <returns>true if cell name is valid; false otherwise</returns>
        private bool isValidName(string name)
        {
            return Regex.IsMatch(name, @"^[a-zA-Z][0-9]+$");
        }

        /// <summary>
        /// Given a spreadsheet, find the current selected cell and
        /// create a popup that contains the information from that cell, which
        /// contains name, contents and value.
        /// 
        /// Clear 
        /// </summary>
        /// <param name="ss"></param>
        private void DisplaySelection(SpreadsheetGridWidget ss)
        {
            //keep track of selected cell's column value and row value
            int row, col;

            //get current cell's col and row value
            ss.GetSelection(out col, out row);
            this.col = col; //save selected col value
            this.row = row; //save selected row val

            //Diplay cell name in cell name textbox
            string cellName = GetCellName(col, row);
            CellNameBox.Text = cellName; //display cell name in CellNameBox

            //Display cell value in cell value text box
            spreadsheetGridWidget1.GetValue(this.col, this.row, out string valInCell);

            if (valInCell is null)
            {
                SetContentBox.Clear(); //If current selected cell is empty, clear content textbox
                CellValueBox.Clear(); //and value textbox
            }
            else
            {
                SetContentBox.Text = sheet.GetCellContents(cellName).ToString(); //If current selected cell is not empty, display input content in content textbox
                CellValueBox.Text = sheet.GetCellValue(cellName).ToString();     // and corresponding value to value textbox
            }

        }

        /// <summary>
        /// Helper method to get the current selected cell's name
        /// </summary>
        /// <param name="col">selected cell' col</param>
        /// <param name="row">selected cell's row</param>
        /// <returns>name of selected cell</returns>
        private string GetCellName(int col, int row)
        {
            return ((char)('A' + col)).ToString() + (row + 1).ToString();
        }

        /// <summary>
        /// Helper method to open a new spread sheet gui.
        /// </summary>
        /// <param name="col">selected cell' col</param>
        /// <param name="row">selected cell's row</param>
        /// <returns>name of selected cell</returns>
        private void NewToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Spreadsheet_Window.getAppContext().RunForm(new SpreadsheetGUI());
        }

        /// <summary>
        /// A button that will update and display selected cell's content and value after clicking.
        /// </summary>
        /// <param name="sender">event sender</param>
        /// <param name="e">default input</param>
        private void SetContentButton_Click(object sender, EventArgs e)
        {
            try
            {
                string cellName = GetCellName(col, row);
                CellNameBox.Text = cellName; //display cell name in CellNameBox

                sheet.SetContentsOfCell(cellName, SetContentBox.Text); //update spreadsheet
                CellValueBox.Text = sheet.GetCellValue(cellName).ToString();

                spreadsheetGridWidget1.SetValue(col, row, CellValueBox.Text);
            }
            //pop up message telling user that the input formula contents is invalid
            catch (InvalidNameException)
            {
                MessageBox.Show($"Error: Invalid Cell Contents input for cell <{CellNameBox.Text}>.", "Error Detected in Input");
            }
            //pop up message telling user that the input formula contents is invalid
            catch (SpreadsheetUtilities.FormulaFormatException)
            {
                MessageBox.Show($"Error: Invalid Cell Contents input for cell <{CellNameBox.Text}>.", "Error Detected in Input");
            }
            //pop up message telling user that the input formula contents causes circular dependency
            catch (CircularException)
            {
                MessageBox.Show($"Error: Input Cell Contents for cell <{CellNameBox.Text}> causes Circular Dependency.", "Error Detected in Input");
            }
        }

        /// <summary>
        /// Close current window if successfully saves current spreadsheet, or if spreadsheet is never
        /// changed since open. If current spreadsheet is not saved, popup message to ask is user want to
        /// close window without saving spreadsheet. If user chooses Yes button, close window without
        /// saving spreadsheet. If not, guid user return to window.
        /// </summary>
        /// <param name="sender">event sender</param>
        /// <param name="e">default input</param>
        private void CloseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string message = "Spreadsheet has not saved yet. Do you still want to close?";
            string caption = "Error Detected in Input";
            MessageBoxButtons buttons = MessageBoxButtons.YesNo;
            DialogResult result;

            //if spreadsheet is ever changed, do the following
            if (sheet.Changed == true)
            {
                result = MessageBox.Show(message, caption, buttons);
                if (result == System.Windows.Forms.DialogResult.Yes)
                {
                    this.Close();
                }
            }
            else //if spreadsheet never changed, do the following
            {
                this.Close();
            }
        }

        /// <summary>
        /// This is a method which is used to save the spread sheet as a .sprd format file.
        /// 
        /// Saving file: *REFERENCE: https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.savefiledialog?view=windowsdesktop-6.0
        /// </summary>
        /// <param name="sender">event sender</param>
        /// <param name="e">default input</param>
        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Stream myStream;
            SaveFileDialog saveFileDialog = new SaveFileDialog();

            saveFileDialog.Filter = "All files (*.*)|*.*|Spreadsheet Files| *.sprd";
            saveFileDialog.FilterIndex = 2;
            saveFileDialog.RestoreDirectory = true;

            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                if ((myStream = saveFileDialog.OpenFile()) != null)
                {
                    myStream.Close();

                    sheet.Save(saveFileDialog.FileName);
                }
            }
        }

        /// <summary>
        /// This is a method which is used to open the spread sheet from a .sprd format file.
        /// After opening the file, transform the information of the file into current spreadsheet
        /// and display them in the grids.
        /// 
        /// Open file: *REFERENCE: https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.openfiledialog?view=windowsdesktop-6.0
        /// </summary>
        /// <param name="sender">event sender</param>
        /// <param name="e">default input</param>
        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var fileContent = string.Empty;
            var filePath = string.Empty;

            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.InitialDirectory = "c:\\";
                openFileDialog.Filter = "sprd files (*.sprd)|*.sprd|All files (*.*)|*.*";
                openFileDialog.FilterIndex = 2;
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    //Get the path of specified file
                    filePath = openFileDialog.FileName;

                    //Read the contents of the file into a stream
                    var fileStream = openFileDialog.OpenFile();

                    using (StreamReader reader = new StreamReader(fileStream))
                    {
                        fileContent = reader.ReadToEnd();
                    }
                }
            }
            try
            {
                Spreadsheet s = new Spreadsheet(filePath, isValidName, s => s.ToUpper(), "six");

                //need to read the spreadsheet of file, so clear the current spreadsheet first
                spreadsheetGridWidget1.Clear();

                IEnumerable<string> cells = s.GetNamesOfAllNonemptyCells();
                foreach (string tempCell in cells)
                {

                    //get corresponding col and row information of the cell in readed file
                    int colVal = (int)(char.Parse(tempCell.Substring(0, 1))) - 65;
                    int rowVal = (int)(char.Parse(tempCell.Substring(1, tempCell.Length - 1))) - 49;

                    //display cell value in readed file to current window's grids
                    spreadsheetGridWidget1.SetValue(colVal, rowVal, s.GetCellValue(tempCell).ToString());
                }
                //update current spreadsheet
                sheet = s;

                //set up default cell to A1
                spreadsheetGridWidget1.SetSelection(0, 0, false);
                CellNameBox.Text = "A1";
                CellValueBox.Text = sheet.GetCellValue("A1").ToString();
                SetContentBox.Text = sheet.GetCellContents("A1").ToString();
            }
            catch
            {
                MessageBox.Show(fileContent, "Wrong File: " + filePath, MessageBoxButtons.OK);
            }
        }

        /// <summary>
        /// A button that allows user to copy the value of selected cell.
        /// </summary>
        /// <param name="sender">event sender</param>
        /// <param name="e">default input</param>
        private void Copy_Click(object sender, EventArgs e)
        {
            string cellName = GetCellName(col, row);
            if (sheet.GetCellContents(cellName) == string.Empty)
                return;
            copy_name = GetCellName(col, row);
        }

        /// <summary>
        /// A button that allows user to cut the value of selected cell.
        /// </summary>
        /// <param name="sender">event sender</param>
        /// <param name="e">default input</param>
        private void CutButton_Click(object sender, EventArgs e)
        {
            string cellName = GetCellName(col, row);
            if (sheet.GetCellContents(cellName) == string.Empty)
                return;
            copy_name = GetCellName(col, row);
            SetContentBox.Clear();
            CellValueBox.Clear();
            spreadsheetGridWidget1.SetValue(col, row, string.Empty);
            sheet.SetContentsOfCell(copy_name, string.Empty);
        }

        /// <summary>
        /// A button that allows user to paste the value of selected cell.
        /// </summary>
        /// <param name="sender">event sender</param>
        /// <param name="e">default input</param>
        private void Paste_Click(object sender, EventArgs e)
        {
            //Do nothing if the copy is empty.
            if(copy_name == null) { return; }

            try
            {
                string pasteContent = sheet.GetCellContents(copy_name).ToString();
                string cellName = GetCellName(col, row);
                CellNameBox.Text = cellName;

                // Add "=" to the content when the copy content is a formula.
                if (sheet.GetCellContents(copy_name).ToString() != sheet.GetCellValue(copy_name).ToString())
                    pasteContent = "=" + sheet.GetCellContents(copy_name).ToString();

                sheet.SetContentsOfCell(cellName, pasteContent);
                SetContentBox.Text = sheet.GetCellContents(cellName).ToString();
                CellValueBox.Text = sheet.GetCellValue(cellName).ToString();

                spreadsheetGridWidget1.SetValue(col, row, CellValueBox.Text);
            }
            catch (SpreadsheetUtilities.FormulaFormatException)
            {
                MessageBox.Show($"Error: Invalid Cell Contents input for cell <{CellNameBox.Text}>.");
            }
            catch (CircularException)
            {
                MessageBox.Show($"Error: Input Cell Contents for cell <{CellNameBox.Text}> causes Circular Dependency.");
            }
        }

        /// <summary>
        /// A button that allows user to delete the value of selected cell.
        /// </summary>
        /// <param name="sender">event sender</param>
        /// <param name="e">default input</param>
        /// 
        private void Delete_Click(object sender, EventArgs e)
        {
            string cellName = GetCellName(col, row);
            SetContentBox.Clear();
            CellValueBox.Clear();
            spreadsheetGridWidget1.SetValue(col, row, string.Empty);
            sheet.SetContentsOfCell(cellName, string.Empty);
        }

        /// <summary>
        /// Display message that helps user to know how to modify the spreadsheet
        /// </summary>
        /// <param name="sender">event sender</param>
        /// <param name="e">default input</param>
        private void Help_Cell_Click(object sender, EventArgs e)
        {
            string message1 = "- Use mouse and click a corresponding grid to select the cell, type cell content to Cell Contents textbox.";
            string message2 = "\r\n- Click Set button will update selected cell's information in Spreadsheet and display cell's contents and value seperately in Cell Contents and Cell Value textboxex.";
            string message3 = "\r\n- Things you can enter: number,formula, and words. The formula start with '='";
            string message4 = "\r\n- You canclear the selected cell by pressing the delete button.";
            string message5 = "\r\n- You can copy, cut, or paste the contents of the selected cell by pressing corresponding buttons.";
            MessageBox.Show(message1 + message2 + message3 + message4 + message5);
        }

        /// <summary>
        /// Display message that helps user to know how to use File->Save
        /// </summary>
        /// <param name="sender">event sender</param>
        /// <param name="e">default input</param>
        private void Help_Save_Click(object sender, EventArgs e)
        {
            string message1 = "- To save the spreadsheet to a file, open Help->About Save";
            MessageBox.Show(message1);
        }

        /// <summary>
        /// Display message that helps user to know how to use File->New
        /// </summary>
        /// <param name="sender">event sender</param>
        /// <param name="e">default input</param>
        private void Help_New_Click(object sender, EventArgs e)
        {
            string message1 = "- To open a new spreadsheet GUI, open Help->About New";
            string message2 = "\r\n- Help->AboutNew will open a new window of spreadsheet once clicked.";
            MessageBox.Show(message1+message2);
        }

        /// <summary>
        /// Display message that helps user to know how to File->Open
        /// </summary>
        /// <param name="sender">event sender</param>
        /// <param name="e">default input</param>
        private void Help_Open_Click(object sender, EventArgs e)
        {
            string message1 = "- To open an existed spreadsheet file, open Help->About Open";
            string message2 = "\r\n- Help->About Open will update the current window and the contents of the spreadsheet with regards to the file opened.";
            MessageBox.Show(message1+message2);
        }

        /// <summary>
        /// Display message that helps user to know how to use File->Close
        /// </summary>
        /// <param name="sender">event sender</param>
        /// <param name="e">default input</param>
        private void Help_Close_Click(object sender, EventArgs e)
        {
            string message1 = "- To close a new spreadsheet GUI, open Help->About Close";
            string message2 = "\r\n- Help->About Close will directly close current window if current spreadsheet is never changed.";
            string message3 = "\r\n- If you ever change the spreadsheet,File->Close will also ask whether you sure want to close the window without saving current spreadsheet.";
            string message4 = "\r\n- Choose 'Yes' will directly close current window. Choose 'No' will direct you back to spreadsheet.";
            MessageBox.Show(message1+message2+message3+message4);
        }

        
    }
}
